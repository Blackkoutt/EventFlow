@using EventFlowAPI.DB.Entities
@using EventFlowAPI.Logic.Helpers
<html>
<body>
    <div style="margin-top:20px;">
        <img style="max-width:200px; min-width: 100px;" src="cid:@LogoContentId" alt="EventFlow Logo" />
        
        @if (EventEntity == null && Festival == null)
        {
            // cancel hall
            <h1>Odwołanie wydarzeń - EventFlow</h1>
            <p>
                Z przykrością informujemy, że pewne wydarzenia na które zakupiłeś bilety zostały odwołane.
            </p>
            <p>
                <strong>Poniżej przedstawione zostały szczegóły dotyczące odwołanych wydarzeń i numerów rezerwacji związnaych z nimi.</strong>
            </p>

            {
                var reservations = DeleteReservationsInfo.Select(x => x.Item1).ToList();
                List<Festival> festivals = [];
                for (var i = 0; i<DeleteReservationsInfo.Count; i++)
                {

                    var reservation = DeleteReservationsInfo.ElementAt(i).Item1;
                    var isFestivalDeleted = DeleteReservationsInfo.ElementAt(i).Item2;
                    var eventEnity = reservation.Ticket.Event;
                    var festivalEntity = reservation.Ticket.Festival;

                    if (reservation.IsFestivalReservation && isFestivalDeleted && festivalEntity != null && !festivals.Contains(festivalEntity))
                    {
                        var festivalReservations = reservations.Where(r => r.IsFestivalReservation && r.Ticket.FestivalId == festivalEntity?.Id);
                        festivals.Add(festivalEntity!);
                        <p>
                            <strong>@(i + 1).
                                Festiwal:
                            </strong> @festivalEntity!.Name,
                            @festivalEntity!.StartDate.ToString(DateFormat.DateTime) - @festivalEntity!.EndDate.ToString(DateFormat.DateTime)
                            <br/>
                            <strong>Rezerwacje nr:</strong> @string.Join(", ", reservations.Select(r => r.Id))
                        </p>
                        reservations.RemoveAll(r => festivalReservations.Contains(r));
                    }
                    else
                    {
                        var eventReservations = reservations.Where(r => !r.IsFestivalReservation && r.Ticket.EventId == eventEnity.Id);
                        var festivalReservations = reservations.Where(r => r.IsFestivalReservation && r.Ticket.FestivalId == festivalEntity?.Id);

                        <p style="margin:0;">
                            <strong>@(i + 1).</strong>
                            @eventEnity.Category.Name @eventEnity.Name,
                            @eventEnity.StartDate.ToString(DateFormat.DateTime) - @eventEnity.EndDate.ToString(DateFormat.DateTime),
                            sala nr @eventEnity.Hall.HallNr
                        </p>
                        if (reservation.IsFestivalReservation)
                        {

                            <p> Dotyczy rezerwacji nr @festivalReservations.FirstOrDefault(r => r.Ticket.EventId == reservation.Ticket.EventId) na festiwal @reservation.Ticket.Festival?.Name </p>
                            reservations.RemoveAll(r => festivalReservations.Contains(r));
                        }
                        else
                        {
                            <p> Rezerwacje nr: @string.Join(", ", eventReservations.Select(r => r.Id)) </p>
                            reservations.RemoveAll(r => eventReservations.Contains(r));
                        }     
                    }
                }
            }
        }
        else if (Festival != null)
        {
            // cancel festival
            <h1>Odwołanie festiwalu - EventFlow</h1>
            <p>
                Z przykrością informujemy, że festiwal na który zakupiłeś bilet zostały odwołany.
            </p>
            <strong>Poniżej przedstawione zostały szczegóły dotyczące odwołanego festiwalu.</strong>

            {
                <p>
                    <strong>Nr rezerwacji: </strong> @DeleteReservationsInfo.First().res.Id
                </p>
                <p>
                    <strong>Nazwa festiwalu: </strong> @Festival.Name
                </p>
                <p>
                    <strong>Data rozpoczęcia festiwalu: </strong> @Festival.StartDate.ToString(DateFormat.Date)
                </p>
                <p>
                    <strong>Data zakończenia festiwalu: </strong> @Festival.EndDate.ToString(DateFormat.Date)
                </p>
                <p>
                    <strong>Wydarzenia: </strong><br/>
                    @for(var i = 0; i < Festival.Events.Count; i++)
                    {
                        var eventEntity = Festival.Events.ElementAt(i);

                        <span>@(i+1). @eventEntity.Name, @eventEntity.StartDate.ToString(DateFormat.DateTime), @eventEntity.Hall.HallNr</span> <br/>
                    }
                </p>
            }
        }
        else
        {
            // cancel event
            var reservations = DeleteReservationsInfo.Select(x => x.Item1).ToList();

            <h1>Odwołanie wydarzenia - EventFlow</h1>
            <p>
                Otrzymujesz ten e-mail w związku z odwołaniem wydarzenia,
                na które dokonałeś rezerwacji w serwisie EventFlow.
                <strong>Wiadomość dotyczy rezerwacji o numerach: @string.Join(", ", reservations.Select(r => r.Id)).</strong>
            </p>
            <p>
                <strong>
                    Z przykrością informujemy, że wydarzenie @EventEntity.Name odbywające się dnia @EventEntity.StartDate.ToString("dd.MM.yyyy")
                    o godz. @EventEntity.StartDate.ToString("HH:mm") w sali nr @EventEntity.Hall.HallNr, na które dokonałeś rezerwacji, zostało odwołane.
                </strong>
            </p>

            var deletedFestivals = DeleteReservationsInfo.Where(x =>
                                    x.res.IsFestivalReservation &&
                                    x.isFestivalDeleted)
                                    .DistinctBy(x => x.Item1.ReservationGuid)
                                    .Select(x => x.res.Ticket.Festival);

            if (deletedFestivals.Any())
            {
                <p>
                    W związku z odwołaniem wydarzenia <strong>@EventEntity.Name</strong>
                    byliśmy zmuszeni odwołać także następujące festiwale na które zakupiłeś bilety: 
                </p>
                for(var i=0; i < deletedFestivals.Count(); i++)
                {
                    var festival = deletedFestivals.ElementAt(i);
                    <p>
                        @(i + 1). @festival!.Name odbywający się w dniach @festival!.StartDate - festival!.Festival.EndDate
                    </p>
                }
            }
        }

        <p>
            Serdecznie przepraszamy za zaistniałą sytuację.
        </p>

        <p>
            W przypadku dokonania płatności, środki zostaną zwrócone na konto, z którego została
            zrealizowana płatność, w ciągu najbliższych kilku dni roboczych.
        </p>
        <p>
            Jeśli masz jakiekolwiek pytania lub potrzebujesz dalszej pomocy, prosimy o kontakt
            z nami drogą mailową: eventflow.kontakt@gmail.com.
        </p>
        <hr />
        <p style="font-size: 10px">
            Powyższy email stanowi treść poufną. Jeżeli otrzymałeś ten mail przez pomyłkę prosimy o powiadomienie nas o zaistniałej sytuacji oraz usunięcie wiadomości.
        </p>
        <p style="font-size: 10px">
            Nadawcą tej wiadomości jest EventFlow. W razie jakichkolwiek pytań lub wątpliwości prosimy skontaktować się z nami drogą elektroniczną: eventflow.kontakt@gmail.com
        </p>
        <p style="font-size: 10px">Wiadomość nadana dnia @DateTime.Now</p>
    </div>
</body>
</html>

@code {
    [Parameter] public List<(Reservation res, bool isFestivalDeleted)> DeleteReservationsInfo { get; set; } = [];
    [Parameter] public string LogoContentId { get; set; } = string.Empty;
    [Parameter] public Event? EventEntity { get; set; } = default!;
    [Parameter] public Festival? Festival { get; set; } = default!;
}
