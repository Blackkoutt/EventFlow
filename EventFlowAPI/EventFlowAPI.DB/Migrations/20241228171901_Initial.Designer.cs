// <auto-generated />
using System;
using EventFlowAPI.DB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventFlowAPI.DB.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20241228171901_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventFlowAPI.DB.Entities.AdditionalServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoftUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(6,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdditionalServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "DJ",
                            Price = 400.00m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Obsługa oświetlenia",
                            Price = 340.00m
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Obsługa nagłośnienia",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Fotograf",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Promocja wydarzenia",
                            Price = 140.00m
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Nowoczesny projektor",
                            IsUpdated = false,
                            Name = "Projektor multimedialny"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wysokiej klasy oświetlenie",
                            IsUpdated = false,
                            Name = "Oświetlenie"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Głośniki przeznaczone do odtwrzania filmów",
                            IsUpdated = false,
                            Name = "Nagłośnienie kinowe"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Głośniki przeznaczone do koncertów",
                            IsUpdated = false,
                            Name = "Nagłośnienie koncertowe"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HallId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 1,
                            Duration = -3600L,
                            EndDate = new DateTime(2024, 12, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("9b515ef1-53b9-46d5-b84e-e982dfa76c64"),
                            HallId = 6,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Koncert: Mystic Waves",
                            PhotoName = "koncert_mystic_waves.png",
                            ShortDescription = "Któtki opis koncertu Mystic Waves.",
                            StartDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 3,
                            Duration = -10800L,
                            EndDate = new DateTime(2024, 12, 27, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("e1512fd0-7d06-41ef-83e4-8b8b3f226423"),
                            HallId = 7,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Cień Przeszłości",
                            PhotoName = "cien_przeszlosci.png",
                            ShortDescription = "Krótki opis spektaklu pt. Cień Przeszłości.",
                            StartDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Duration = -7200L,
                            EndDate = new DateTime(2024, 12, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("e1aff47b-b383-4d14-9a94-4422363324c1"),
                            HallId = 5,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Królestwo planety małp",
                            PhotoName = "krolestwo_planety_malp.png",
                            ShortDescription = "Nowy film Królestwo planety małp już w kinach!.",
                            StartDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 4,
                            Duration = -10800L,
                            EndDate = new DateTime(2024, 12, 29, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("d483703c-a28d-41d8-bb78-cbab228d0828"),
                            HallId = 8,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Nowe inspiracje",
                            PhotoName = "nowe_inspiracje.png",
                            ShortDescription = "Nowe inspiracje to nowoczesna wystawa sztuki.",
                            StartDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 1,
                            Duration = -3600L,
                            EndDate = new DateTime(2025, 1, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("825c18ba-41b6-4fd9-9a24-45c5d142187b"),
                            HallId = 10,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Koncert: New Era",
                            PhotoName = "",
                            ShortDescription = "Jedyna taka okazja na usłyszenie New Era na żywo.",
                            StartDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Duration = -7200L,
                            EndDate = new DateTime(2025, 1, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("0c83fd30-a456-42b1-91a9-d3d57bcb7b99"),
                            HallId = 9,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Gladiator",
                            PhotoName = "",
                            ShortDescription = "Nowy film Gladiator już w kinach!.",
                            StartDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 4,
                            Duration = -10800L,
                            EndDate = new DateTime(2025, 1, 29, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            EventGuid = new Guid("128c1322-5861-443d-b145-3f3519935a08"),
                            HallId = 11,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Nowa sztuka",
                            PhotoName = "",
                            ShortDescription = "Nowe sztuka to nowoczesna wystawa sztuki.",
                            StartDate = new DateTime(2025, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#82CAFC",
                            Icon = "fa-solid fa-music",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Koncert"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#6BD49B",
                            Icon = "fa-solid fa-film",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Film"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#C33EB1",
                            Icon = "fa-solid fa-masks-theater",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Spektakl"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FC5353",
                            Icon = "fa-solid fa-landmark",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Wystawa"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("EventDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LongDescription = "Krótki opis wydarzenia Koncert: Mystic Waves"
                        },
                        new
                        {
                            Id = 2,
                            LongDescription = "Krótki opis wydarzenia Spektakl: Cień Przeszłość"
                        },
                        new
                        {
                            Id = 3,
                            LongDescription = "Krótki opis wydarzenia Film: Królestwo planety małp"
                        },
                        new
                        {
                            Id = 4,
                            LongDescription = "Krótki opis wydarzenia Wystawa: Nowe inspiracje"
                        },
                        new
                        {
                            Id = 5,
                            LongDescription = "Krótki opis wydarzenia Koncert: New Era"
                        },
                        new
                        {
                            Id = 6,
                            LongDescription = "Krótki opis wydarzenia Film: Gladiator"
                        },
                        new
                        {
                            Id = 7,
                            LongDescription = "Krótki opis wydarzenia Wystawa: Nowa sztuka"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventPassGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventPassJPGName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventPassPDFName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<int>("PassTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("NUMERIC(6,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreviousEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("NUMERIC(5,2)");

                    b.Property<decimal>("TotalDiscountPercentage")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PassTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("EventPass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPassGuid = new Guid("b00ca94a-e6b2-4d2e-b270-244b3e76048d"),
                            EventPassJPGName = "eventflow_karnet_b00ca94a-e6b2-4d2e-b270-244b3e76048d.jpg",
                            EventPassPDFName = "eventflow_karnet_b00ca94a-e6b2-4d2e-b270-244b3e76048d.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PassTypeId = 3,
                            PaymentAmount = 499.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalDiscount = 0m,
                            TotalDiscountPercentage = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPassGuid = new Guid("766245b4-8c08-49dd-9480-2606aaa590be"),
                            EventPassJPGName = "eventflow_karnet_766245b4-8c08-49dd-9480-2606aaa590be.jpg",
                            EventPassPDFName = "eventflow_karnet_766245b4-8c08-49dd-9480-2606aaa590be.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PassTypeId = 4,
                            PaymentAmount = 999.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalDiscount = 0m,
                            TotalDiscountPercentage = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventPassGuid = new Guid("33610a0d-a1b7-4700-bffe-9e334b977e6a"),
                            EventPassJPGName = "eventflow_karnet_33610a0d-a1b7-4700-bffe-9e334b977e6a.jpg",
                            EventPassPDFName = "eventflow_karnet_33610a0d-a1b7-4700-bffe-9e334b977e6a.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PassTypeId = 2,
                            PaymentAmount = 235.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            StartDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalDiscount = 0m,
                            TotalDiscountPercentage = 0m,
                            UserId = "4"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventPassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoftUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(6,2)");

                    b.Property<decimal>("RenewalDiscountPercentage")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValidityPeriodInMonths")
                        .HasColumnType("NUMERIC(2)");

                    b.HasKey("Id");

                    b.ToTable("EventPassType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Karnet miesięczny",
                            Price = 89.99m,
                            RenewalDiscountPercentage = 5m,
                            ValidityPeriodInMonths = 1m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Karnet kwartalny",
                            Price = 235.99m,
                            RenewalDiscountPercentage = 10m,
                            ValidityPeriodInMonths = 3m
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Karnet półroczny",
                            Price = 499.99m,
                            RenewalDiscountPercentage = 15m,
                            ValidityPeriodInMonths = 6m
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Karnet roczny",
                            Price = 999.99m,
                            RenewalDiscountPercentage = 20m,
                            ValidityPeriodInMonths = 12m
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FAQ");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed justo erat, tempor quis sagittis et, sodales id nibh. Phasellus diam enim, sodales pharetra neque eget, sollicitudin vulputate est. Morbi ac velit sed arcu malesuada feugiat. Suspendisse potenti. Donec commodo mauris nisi. Nulla ut mi eu lectus consequat porta at commodo.",
                            Question = "W jaki sposób mogę kupić bilet na wydarzenie ?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed justo erat, tempor quis sagittis et, sodales id nibh. Phasellus diam enim, sodales pharetra neque eget, sollicitudin vulputate est. Morbi ac velit sed arcu malesuada feugiat. Suspendisse potenti. Donec commodo mauris nisi. Nulla ut mi eu lectus consequat porta at commodo.",
                            Question = "Jak mogę wynająć salę ?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed justo erat, tempor quis sagittis et, sodales id nibh. Phasellus diam enim, sodales pharetra neque eget, sollicitudin vulputate est. Morbi ac velit sed arcu malesuada feugiat. Suspendisse potenti. Donec commodo mauris nisi. Nulla ut mi eu lectus consequat porta at commodo.",
                            Question = "Co ile czasu muszę przedłużać karnet ?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed justo erat, tempor quis sagittis et, sodales id nibh. Phasellus diam enim, sodales pharetra neque eget, sollicitudin vulputate est. Morbi ac velit sed arcu malesuada feugiat. Suspendisse potenti. Donec commodo mauris nisi. Nulla ut mi eu lectus consequat porta at commodo.",
                            Question = "Jak zwrócić zakupiony bilet ?"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FestivalGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Festival");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = -2768400L,
                            EndDate = new DateTime(2025, 1, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            FestivalGuid = new Guid("ba182f30-ab07-4a45-a690-4e0f838bd059"),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Festiwal muzyki hip-hop",
                            PhotoName = "festival.png",
                            ShortDescription = "Festiwal muzyki hip-hop to nowy festiwal organizowany przez XYZ.",
                            StartDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = -2772000L,
                            EndDate = new DateTime(2025, 1, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            FestivalGuid = new Guid("aad0047d-da2f-45ef-9266-796cac56cb37"),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Festiwal filmowy",
                            PhotoName = "",
                            ShortDescription = "Festiwal filmowy to festiwal na którym można obejrzeć filmy.",
                            StartDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AddDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = -2689200L,
                            EndDate = new DateTime(2025, 1, 29, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            FestivalGuid = new Guid("007dd3d8-18ee-4f71-98c2-b26839ece49b"),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Festiwal sztuki abstrakcyjnej",
                            PhotoName = "",
                            ShortDescription = "Festiwal sztuki abstrakcyjnej to festiwal na którym można zobaczyć sztukę.",
                            StartDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.FestivalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LongDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("FestivalDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LongDescription = "Opis festiwalu muzyki współczesnej"
                        },
                        new
                        {
                            Id = 2,
                            LongDescription = "Opis festiwalu filmowego"
                        },
                        new
                        {
                            Id = 3,
                            LongDescription = "Opis festiwalu sztuki abstrakcyjnej"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Event", b =>
                {
                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("FestivalId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Festival_Event");

                    b.HasData(
                        new
                        {
                            FestivalId = 1,
                            EventId = 1
                        },
                        new
                        {
                            FestivalId = 1,
                            EventId = 5
                        },
                        new
                        {
                            FestivalId = 2,
                            EventId = 2
                        },
                        new
                        {
                            FestivalId = 2,
                            EventId = 6
                        },
                        new
                        {
                            FestivalId = 3,
                            EventId = 4
                        },
                        new
                        {
                            FestivalId = 3,
                            EventId = 7
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_MediaPatron", b =>
                {
                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("MediaPatronId")
                        .HasColumnType("int");

                    b.HasKey("FestivalId", "MediaPatronId");

                    b.HasIndex("MediaPatronId");

                    b.ToTable("Festival_MediaPatron");

                    b.HasData(
                        new
                        {
                            FestivalId = 1,
                            MediaPatronId = 1
                        },
                        new
                        {
                            FestivalId = 1,
                            MediaPatronId = 2
                        },
                        new
                        {
                            FestivalId = 2,
                            MediaPatronId = 1
                        },
                        new
                        {
                            FestivalId = 2,
                            MediaPatronId = 3
                        },
                        new
                        {
                            FestivalId = 3,
                            MediaPatronId = 2
                        },
                        new
                        {
                            FestivalId = 3,
                            MediaPatronId = 3
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Organizer", b =>
                {
                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.HasKey("FestivalId", "OrganizerId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Festival_Organizer");

                    b.HasData(
                        new
                        {
                            FestivalId = 1,
                            OrganizerId = 1
                        },
                        new
                        {
                            FestivalId = 1,
                            OrganizerId = 2
                        },
                        new
                        {
                            FestivalId = 2,
                            OrganizerId = 1
                        },
                        new
                        {
                            FestivalId = 2,
                            OrganizerId = 3
                        },
                        new
                        {
                            FestivalId = 3,
                            OrganizerId = 2
                        },
                        new
                        {
                            FestivalId = 3,
                            OrganizerId = 3
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Sponsor", b =>
                {
                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("SponsorId")
                        .HasColumnType("int");

                    b.HasKey("FestivalId", "SponsorId");

                    b.HasIndex("SponsorId");

                    b.ToTable("Festival_Sponsor");

                    b.HasData(
                        new
                        {
                            FestivalId = 1,
                            SponsorId = 1
                        },
                        new
                        {
                            FestivalId = 1,
                            SponsorId = 2
                        },
                        new
                        {
                            FestivalId = 2,
                            SponsorId = 1
                        },
                        new
                        {
                            FestivalId = 2,
                            SponsorId = 3
                        },
                        new
                        {
                            FestivalId = 3,
                            SponsorId = 2
                        },
                        new
                        {
                            FestivalId = 3,
                            SponsorId = 3
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DefaultId")
                        .HasColumnType("int");

                    b.Property<decimal>("Floor")
                        .HasColumnType("NUMERIC(1)");

                    b.Property<int>("HallNr")
                        .HasColumnType("int");

                    b.Property<int>("HallTypeId")
                        .HasColumnType("int");

                    b.Property<string>("HallViewFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<decimal>("RentalPricePerHour")
                        .HasColumnType("NUMERIC(5,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallTypeId");

                    b.ToTable("Hall");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultId = 1,
                            Floor = 2m,
                            HallNr = 1,
                            HallTypeId = 1,
                            HallViewFileName = "sala_5_5_1.pdf",
                            IsCopy = false,
                            IsUpdated = false,
                            IsVisible = true,
                            RentalPricePerHour = 120.99m
                        },
                        new
                        {
                            Id = 2,
                            DefaultId = 2,
                            Floor = 1m,
                            HallNr = 2,
                            HallTypeId = 2,
                            HallViewFileName = "sala_5_5_2.pdf",
                            IsCopy = false,
                            IsUpdated = false,
                            IsVisible = true,
                            RentalPricePerHour = 89.99m
                        },
                        new
                        {
                            Id = 3,
                            DefaultId = 3,
                            Floor = 2m,
                            HallNr = 3,
                            HallTypeId = 3,
                            HallViewFileName = "sala_5_5_3.pdf",
                            IsCopy = false,
                            IsUpdated = false,
                            IsVisible = true,
                            RentalPricePerHour = 179.99m
                        },
                        new
                        {
                            Id = 4,
                            DefaultId = 4,
                            Floor = 1m,
                            HallNr = 4,
                            HallTypeId = 4,
                            HallViewFileName = "sala_5_5_4.pdf",
                            IsCopy = false,
                            IsUpdated = false,
                            IsVisible = true,
                            RentalPricePerHour = 199.99m
                        },
                        new
                        {
                            Id = 5,
                            DefaultId = 1,
                            Floor = 2m,
                            HallNr = 1,
                            HallTypeId = 1,
                            HallViewFileName = "sala_5_5_5.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 120.99m
                        },
                        new
                        {
                            Id = 6,
                            DefaultId = 2,
                            Floor = 1m,
                            HallNr = 2,
                            HallTypeId = 2,
                            HallViewFileName = "sala_5_5_6.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 89.99m
                        },
                        new
                        {
                            Id = 7,
                            DefaultId = 3,
                            Floor = 2m,
                            HallNr = 3,
                            HallTypeId = 3,
                            HallViewFileName = "sala_5_5_7.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 179.99m
                        },
                        new
                        {
                            Id = 8,
                            DefaultId = 4,
                            Floor = 1m,
                            HallNr = 4,
                            HallTypeId = 4,
                            HallViewFileName = "sala_5_5_8.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 199.99m
                        },
                        new
                        {
                            Id = 9,
                            DefaultId = 1,
                            Floor = 2m,
                            HallNr = 1,
                            HallTypeId = 1,
                            HallViewFileName = "sala_5_5_9.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 120.99m
                        },
                        new
                        {
                            Id = 10,
                            DefaultId = 2,
                            Floor = 1m,
                            HallNr = 2,
                            HallTypeId = 2,
                            HallViewFileName = "sala_5_5_10.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 89.99m
                        },
                        new
                        {
                            Id = 11,
                            DefaultId = 4,
                            Floor = 1m,
                            HallNr = 4,
                            HallTypeId = 4,
                            HallViewFileName = "sala_5_5_11.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 199.99m
                        },
                        new
                        {
                            Id = 12,
                            DefaultId = 1,
                            Floor = 2m,
                            HallNr = 1,
                            HallTypeId = 1,
                            HallViewFileName = "sala_5_5_12.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 120.99m
                        },
                        new
                        {
                            Id = 13,
                            DefaultId = 2,
                            Floor = 1m,
                            HallNr = 2,
                            HallTypeId = 2,
                            HallViewFileName = "sala_5_5_13.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 89.99m
                        },
                        new
                        {
                            Id = 14,
                            DefaultId = 3,
                            Floor = 2m,
                            HallNr = 3,
                            HallTypeId = 3,
                            HallViewFileName = "sala_5_5_14.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 179.99m
                        },
                        new
                        {
                            Id = 15,
                            DefaultId = 4,
                            Floor = 1m,
                            HallNr = 4,
                            HallTypeId = 4,
                            HallViewFileName = "sala_5_5_15.pdf",
                            IsCopy = true,
                            IsUpdated = false,
                            IsVisible = false,
                            RentalPricePerHour = 199.99m
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxNumberOfSeats")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<decimal>("MaxNumberOfSeatsColumns")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("MaxNumberOfSeatsRows")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("NumberOfSeats")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<decimal?>("StageLength")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<decimal?>("StageWidth")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<decimal>("TotalArea")
                        .HasColumnType("NUMERIC(5,2)");

                    b.Property<decimal>("TotalLength")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<decimal>("TotalWidth")
                        .HasColumnType("NUMERIC(4,2)");

                    b.HasKey("Id");

                    b.ToTable("HallDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxNumberOfSeats = 255m,
                            MaxNumberOfSeatsColumns = 15m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 100m,
                            StageLength = 4m,
                            StageWidth = 20m,
                            TotalArea = 800m,
                            TotalLength = 20m,
                            TotalWidth = 40m
                        },
                        new
                        {
                            Id = 2,
                            MaxNumberOfSeats = 150m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 150m,
                            TotalArea = 150m,
                            TotalLength = 15m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 3,
                            MaxNumberOfSeats = 60m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 6m,
                            NumberOfSeats = 60m,
                            StageLength = 4m,
                            StageWidth = 5m,
                            TotalArea = 80m,
                            TotalLength = 10m,
                            TotalWidth = 8m
                        },
                        new
                        {
                            Id = 4,
                            MaxNumberOfSeats = 100m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 10m,
                            NumberOfSeats = 100m,
                            StageLength = 5m,
                            StageWidth = 8m,
                            TotalArea = 140m,
                            TotalLength = 14m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 5,
                            MaxNumberOfSeats = 255m,
                            MaxNumberOfSeatsColumns = 15m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 100m,
                            StageLength = 4m,
                            StageWidth = 20m,
                            TotalArea = 800m,
                            TotalLength = 20m,
                            TotalWidth = 40m
                        },
                        new
                        {
                            Id = 6,
                            MaxNumberOfSeats = 150m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 150m,
                            TotalArea = 150m,
                            TotalLength = 15m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 7,
                            MaxNumberOfSeats = 60m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 6m,
                            NumberOfSeats = 60m,
                            StageLength = 4m,
                            StageWidth = 5m,
                            TotalArea = 80m,
                            TotalLength = 10m,
                            TotalWidth = 8m
                        },
                        new
                        {
                            Id = 8,
                            MaxNumberOfSeats = 100m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 10m,
                            NumberOfSeats = 100m,
                            StageLength = 5m,
                            StageWidth = 8m,
                            TotalArea = 140m,
                            TotalLength = 14m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 9,
                            MaxNumberOfSeats = 255m,
                            MaxNumberOfSeatsColumns = 15m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 100m,
                            StageLength = 4m,
                            StageWidth = 20m,
                            TotalArea = 800m,
                            TotalLength = 20m,
                            TotalWidth = 40m
                        },
                        new
                        {
                            Id = 10,
                            MaxNumberOfSeats = 150m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 150m,
                            TotalArea = 150m,
                            TotalLength = 15m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 11,
                            MaxNumberOfSeats = 100m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 10m,
                            NumberOfSeats = 100m,
                            StageLength = 5m,
                            StageWidth = 8m,
                            TotalArea = 140m,
                            TotalLength = 14m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 12,
                            MaxNumberOfSeats = 255m,
                            MaxNumberOfSeatsColumns = 15m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 100m,
                            StageLength = 4m,
                            StageWidth = 20m,
                            TotalArea = 800m,
                            TotalLength = 20m,
                            TotalWidth = 40m
                        },
                        new
                        {
                            Id = 13,
                            MaxNumberOfSeats = 150m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 15m,
                            NumberOfSeats = 150m,
                            TotalArea = 150m,
                            TotalLength = 15m,
                            TotalWidth = 10m
                        },
                        new
                        {
                            Id = 14,
                            MaxNumberOfSeats = 60m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 6m,
                            NumberOfSeats = 60m,
                            StageLength = 4m,
                            StageWidth = 5m,
                            TotalArea = 80m,
                            TotalLength = 10m,
                            TotalWidth = 8m
                        },
                        new
                        {
                            Id = 15,
                            MaxNumberOfSeats = 100m,
                            MaxNumberOfSeatsColumns = 10m,
                            MaxNumberOfSeatsRows = 10m,
                            NumberOfSeats = 100m,
                            StageLength = 5m,
                            StageWidth = 8m,
                            TotalArea = 140m,
                            TotalLength = 14m,
                            TotalWidth = 10m
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallRent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<Guid>("HallRentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HallRentPDFName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("NUMERIC(7,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("HallRent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 28800L,
                            EndDate = new DateTime(2024, 12, 26, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 12,
                            HallRentGuid = new Guid("65187b98-308a-4398-9514-a3537cc804b3"),
                            HallRentPDFName = "wynajem_sali_1.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PaymentAmount = 899.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            RentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "4"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 14400L,
                            EndDate = new DateTime(2024, 12, 27, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 13,
                            HallRentGuid = new Guid("2c2e23bc-396b-4955-9a89-f2db1c2499eb"),
                            HallRentPDFName = "wynajem_sali_2.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PaymentAmount = 699.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            RentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 3,
                            Duration = 7200L,
                            EndDate = new DateTime(2024, 12, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 14,
                            HallRentGuid = new Guid("578d2786-891b-425c-a557-487588a2e961"),
                            HallRentPDFName = "wynajem_sali_3.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PaymentAmount = 399.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            RentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            Duration = 3600L,
                            EndDate = new DateTime(2024, 12, 29, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 15,
                            HallRentGuid = new Guid("6ad7ac1e-567b-46b0-9f5d-ca154d2f2422"),
                            HallRentPDFName = "wynajem_sali_4.pdf",
                            IsDeleted = false,
                            IsUpdated = false,
                            PaymentAmount = 150.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            RentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallRent_AdditionalServices", b =>
                {
                    b.Property<int>("HallRentId")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalServicesId")
                        .HasColumnType("int");

                    b.HasKey("HallRentId", "AdditionalServicesId");

                    b.HasIndex("AdditionalServicesId");

                    b.ToTable("HallRent_AdditionalServices");

                    b.HasData(
                        new
                        {
                            HallRentId = 2,
                            AdditionalServicesId = 1
                        },
                        new
                        {
                            HallRentId = 2,
                            AdditionalServicesId = 2
                        },
                        new
                        {
                            HallRentId = 2,
                            AdditionalServicesId = 3
                        },
                        new
                        {
                            HallRentId = 3,
                            AdditionalServicesId = 2
                        },
                        new
                        {
                            HallRentId = 4,
                            AdditionalServicesId = 4
                        },
                        new
                        {
                            HallRentId = 4,
                            AdditionalServicesId = 5
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid>("HallTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoftUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HallType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Nowa sala kinowa wyposażona w nowoczesne nagłośnienie i ekran",
                            HallTypeGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Sala filmowa",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 2,
                            Description = "Nowa sala koncertowa wyposażona w najwyższej klasy nagłośnienie",
                            HallTypeGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Sala koncertowa",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 3,
                            Description = "Opis sali teatralnej",
                            HallTypeGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Sala teatralna",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 4,
                            Description = "Opis sali wystawowa",
                            HallTypeGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Sala wystawowa",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sala ogólna",
                            HallTypeGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Sala ogólna",
                            PhotoName = ""
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallType_Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("HallTypeId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId", "HallTypeId");

                    b.HasIndex("HallTypeId");

                    b.ToTable("HallType_Equipment");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            HallTypeId = 1
                        },
                        new
                        {
                            EquipmentId = 3,
                            HallTypeId = 1
                        },
                        new
                        {
                            EquipmentId = 2,
                            HallTypeId = 2
                        },
                        new
                        {
                            EquipmentId = 4,
                            HallTypeId = 2
                        },
                        new
                        {
                            EquipmentId = 2,
                            HallTypeId = 3
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.MediaPatron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<Guid>("MediaPatronGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MediaPatron");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            MediaPatronGuid = new Guid("9ae98d45-8324-4dec-9bb6-23882451e548"),
                            Name = "Gazeta Nowoczesna",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            MediaPatronGuid = new Guid("9fe263f8-bdb8-42d6-895f-4b9bd1c54bd8"),
                            Name = "Nowy świat TV",
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsUpdated = false,
                            MediaPatronGuid = new Guid("a0792b34-d7d8-4f15-9bb8-541f1b58754a"),
                            Name = "Tygodnik Nowiny",
                            PhotoName = ""
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NewsGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus velit ac, feugiat turpis. Vestibulum fermentum placerat mi nec scelerisque. Ut id nibh ornare, luctus velit ac, feugiat turpis. Vestibulum fermentum. Vestibulum fermentum placerat mi nec. Ut id nibh ornare, luctus velit ac, feugiat turpis.Vestibulum fermentum. Vestibulum fermentum.",
                            NewsGuid = new Guid("2d09f544-5e23-4d8b-aaeb-df3bc19e8e6c"),
                            PhotoName = "konkurs_artystyczny.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus velit ac, feugiat turpis. Vestibulum fermentum placerat mi nec scelerisque. Ut id nibh ornare, luctus velit ac, feugiat turpis. Vestibulum fermentum. Vestibulum fermentum placerat mi nec. Ut id nibh ornare, luctus velit ac, feugiat turpis.Vestibulum fermentum. Vestibulum fermentum.",
                            Title = "Finał konkursu artystycznego"
                        },
                        new
                        {
                            Id = 2,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            NewsGuid = new Guid("f5322977-460f-47ae-baf6-bf60a681e662"),
                            PhotoName = "koncert_lunar_vibes.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            Title = "Relacja z koncertu zespołu Lunar Vibes"
                        },
                        new
                        {
                            Id = 3,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            NewsGuid = new Guid("58c32801-35d7-4542-ac76-b526436c25e3"),
                            PhotoName = "modernizacja sali.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            Title = "Modernizacja sali koncertowej"
                        },
                        new
                        {
                            Id = 4,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            NewsGuid = new Guid("4b805b4f-532c-4b03-88d8-6d4bb6bc86e0"),
                            PhotoName = "znizka.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            Title = "Zniżka 20% na zakup karnetów"
                        },
                        new
                        {
                            Id = 5,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            NewsGuid = new Guid("eb974357-df20-4328-8c65-c35d1afc9abc"),
                            PhotoName = "noc_filmowa.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            Title = "Noc Filmowa z Klasykami Kina"
                        },
                        new
                        {
                            Id = 6,
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            NewsGuid = new Guid("a66c9ee8-b146-4b31-b3ee-cfbd5bf969f0"),
                            PhotoName = "wernisaz.png",
                            PublicationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut id nibh ornare, luctus...",
                            Title = "Wernisaż: Nowe inspiracje"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OrganizerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Organizer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "EventFlow",
                            OrganizerGuid = new Guid("52d14494-8458-4794-aa91-c0c2a3602e46"),
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Snowflake",
                            OrganizerGuid = new Guid("ca482ef2-a262-410f-b249-395c9b97290b"),
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Aura",
                            OrganizerGuid = new Guid("4a162082-7a78-497f-bd2a-287c96f2536c"),
                            PhotoName = ""
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Partner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basel",
                            PartnerGuid = new Guid("dec55ba4-7115-4951-bbbf-3e856bee298e"),
                            PhotoName = "basel.png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aura",
                            PartnerGuid = new Guid("ba6484be-9336-4582-b330-d1e06ca5dfdd"),
                            PhotoName = "aura.png"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vision",
                            PartnerGuid = new Guid("2b62d8d4-161e-463b-9df3-7b93be83e4ed"),
                            PhotoName = "vision.png"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Snowflake",
                            PartnerGuid = new Guid("9d2d7eb9-a084-4ee0-af44-d5f68fbe0d07"),
                            PhotoName = "snowflake.png"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Waveless",
                            PartnerGuid = new Guid("89252a64-044e-4cf5-ae1a-3a9f4efdf4ae"),
                            PhotoName = "waveless.png"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("PaymentTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "PayU",
                            PaymentTypeGuid = new Guid("7ff2ac8a-4f9a-4b0c-b232-776c8555990c"),
                            PhotoName = ""
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Karnet",
                            PaymentTypeGuid = new Guid("ff4b7fd1-6925-4ba1-83c3-9078dcdc6cd8"),
                            PhotoName = ""
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventPassId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFestivalReservation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("NUMERIC(7,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReservationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketPDFId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAdditionalPaymentAmount")
                        .HasColumnType("NUMERIC(6,2)");

                    b.Property<decimal>("TotalAddtionalPaymentPercentage")
                        .HasColumnType("NUMERIC(5,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("NUMERIC(7,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventPassId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketPDFId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 12, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = false,
                            IsUpdated = false,
                            PaymentAmount = 24.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("53538b58-f885-4f4a-b675-a4aa4063ccf3"),
                            StartDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 1,
                            TicketPDFId = 1,
                            TotalAdditionalPaymentAmount = 2.5m,
                            TotalAddtionalPaymentPercentage = 10m,
                            TotalDiscount = 0m,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 12, 27, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = false,
                            IsUpdated = false,
                            PaymentAmount = 34.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("ed8b9230-223b-4609-8d13-aa6017edad09"),
                            StartDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 2,
                            TicketPDFId = 2,
                            TotalAdditionalPaymentAmount = 0m,
                            TotalAddtionalPaymentPercentage = 0m,
                            TotalDiscount = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 12, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = false,
                            IsUpdated = false,
                            PaymentAmount = 29.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("f9a076c4-3475-4a28-a60c-6e0e3c03731a"),
                            StartDate = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 3,
                            TicketPDFId = 3,
                            TotalAdditionalPaymentAmount = 7.5m,
                            TotalAddtionalPaymentPercentage = 25m,
                            TotalDiscount = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 12, 29, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = false,
                            IsUpdated = false,
                            PaymentAmount = 19.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("de1d6773-f027-4888-996a-0296e5c52708"),
                            StartDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 4,
                            TicketPDFId = 4,
                            TotalAdditionalPaymentAmount = 0m,
                            TotalAddtionalPaymentPercentage = 0m,
                            TotalDiscount = 0m,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 12, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = true,
                            IsUpdated = false,
                            PaymentAmount = 19.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("0b74ec7b-933b-4163-afa5-e0997681dccd"),
                            StartDate = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 5,
                            TicketPDFId = 5,
                            TotalAdditionalPaymentAmount = 2m,
                            TotalAddtionalPaymentPercentage = 10m,
                            TotalDiscount = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2025, 1, 26, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = true,
                            IsUpdated = false,
                            PaymentAmount = 19.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("0b74ec7b-933b-4163-afa5-e0997681dccd"),
                            StartDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 6,
                            TicketPDFId = 5,
                            TotalAdditionalPaymentAmount = 2m,
                            TotalAddtionalPaymentPercentage = 10m,
                            TotalDiscount = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2024, 12, 27, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = true,
                            IsUpdated = false,
                            PaymentAmount = 29.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("806cade1-2685-43dc-8cfc-682fc4229db6"),
                            StartDate = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 7,
                            TicketPDFId = 6,
                            TotalAdditionalPaymentAmount = 0m,
                            TotalAddtionalPaymentPercentage = 0m,
                            TotalDiscount = 0m,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2025, 1, 28, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFestivalReservation = true,
                            IsUpdated = false,
                            PaymentAmount = 29.99m,
                            PaymentDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            ReservationDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReservationGuid = new Guid("806cade1-2685-43dc-8cfc-682fc4229db6"),
                            StartDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TicketId = 8,
                            TicketPDFId = 6,
                            TotalAdditionalPaymentAmount = 0m,
                            TotalAddtionalPaymentPercentage = 0m,
                            TotalDiscount = 0m,
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation_Seat", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("Reservation_Seat");

                    b.HasData(
                        new
                        {
                            ReservationId = 8,
                            SeatId = 20
                        },
                        new
                        {
                            ReservationId = 3,
                            SeatId = 14
                        },
                        new
                        {
                            ReservationId = 1,
                            SeatId = 26
                        },
                        new
                        {
                            ReservationId = 5,
                            SeatId = 29
                        },
                        new
                        {
                            ReservationId = 6,
                            SeatId = 33
                        },
                        new
                        {
                            ReservationId = 2,
                            SeatId = 38
                        },
                        new
                        {
                            ReservationId = 7,
                            SeatId = 41
                        },
                        new
                        {
                            ReservationId = 4,
                            SeatId = 46
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation_TicketJPG", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("TicketJPGId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId", "TicketJPGId");

                    b.HasIndex("TicketJPGId");

                    b.ToTable("Reservation_TicketJPG");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            TicketJPGId = 1
                        },
                        new
                        {
                            ReservationId = 2,
                            TicketJPGId = 2
                        },
                        new
                        {
                            ReservationId = 3,
                            TicketJPGId = 3
                        },
                        new
                        {
                            ReservationId = 4,
                            TicketJPGId = 4
                        },
                        new
                        {
                            ReservationId = 5,
                            TicketJPGId = 5
                        },
                        new
                        {
                            ReservationId = 5,
                            TicketJPGId = 6
                        },
                        new
                        {
                            ReservationId = 6,
                            TicketJPGId = 5
                        },
                        new
                        {
                            ReservationId = 6,
                            TicketJPGId = 6
                        },
                        new
                        {
                            ReservationId = 7,
                            TicketJPGId = 7
                        },
                        new
                        {
                            ReservationId = 7,
                            TicketJPGId = 8
                        },
                        new
                        {
                            ReservationId = 8,
                            TicketJPGId = 7
                        },
                        new
                        {
                            ReservationId = 8,
                            TicketJPGId = 8
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Column")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("GridColumn")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("GridRow")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Row")
                        .HasColumnType("NUMERIC(2)");

                    b.Property<decimal>("SeatNr")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("SeatTypeId");

                    b.ToTable("Seat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 1,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 1,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 1,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 1,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 2,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 2,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 2,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 2,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 3,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 3,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 11,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 3,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 12,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 3,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 13,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 4,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 14,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 5,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 5,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 5,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 5,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 9,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 19,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 9,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 20,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 9,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 21,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 9,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 22,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 12,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 23,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 12,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 24,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 12,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 12,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 26,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 6,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 27,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 6,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 28,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 6,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 29,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 6,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 30,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 10,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 31,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 10,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 32,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 10,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 33,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 10,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 34,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 13,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 35,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 13,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 36,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 13,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 37,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 13,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 38,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 7,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 39,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 7,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 40,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 7,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 41,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 7,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 42,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 14,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 43,
                            Column = 2m,
                            GridColumn = 2m,
                            GridRow = 1m,
                            HallId = 14,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 2m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 44,
                            Column = 3m,
                            GridColumn = 3m,
                            GridRow = 1m,
                            HallId = 14,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 3m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 45,
                            Column = 4m,
                            GridColumn = 4m,
                            GridRow = 1m,
                            HallId = 14,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 4m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 46,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 8,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 47,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 11,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 48,
                            Column = 1m,
                            GridColumn = 1m,
                            GridRow = 1m,
                            HallId = 15,
                            IsUpdated = false,
                            Row = 1m,
                            SeatNr = 1m,
                            SeatTypeId = 3
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AddtionalPaymentPercentage")
                        .HasColumnType("NUMERIC(4,2)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoftUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SeatColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SeatType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddtionalPaymentPercentage = 25.00m,
                            Description = "Opis miejsca VIP",
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Miejsce VIP",
                            SeatColor = "#9803fc"
                        },
                        new
                        {
                            Id = 2,
                            AddtionalPaymentPercentage = 10.00m,
                            Description = "Opis miejsca klasy premium",
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Miejsce klasy premium",
                            SeatColor = "#ffa600"
                        },
                        new
                        {
                            Id = 3,
                            AddtionalPaymentPercentage = 0.00m,
                            Description = "Opis miejsca zwykłego",
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Miejsce zwykłe",
                            SeatColor = "#039aff"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SponsorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sponsor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Basel",
                            PhotoName = "",
                            SponsorGuid = new Guid("f3354a78-f4ed-42ca-95ea-4945c17d45f7")
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Vision",
                            PhotoName = "",
                            SponsorGuid = new Guid("99b259d1-5b5b-4412-b92c-014910822e22")
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Waveless",
                            PhotoName = "",
                            SponsorGuid = new Guid("ce21ea64-4956-4427-a771-465d19ba5dde")
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("FestivalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMERIC(5,2)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FestivalId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 24.99m,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 34.99m,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 29.99m,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            EventId = 4,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 19.99m,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            EventId = 1,
                            FestivalId = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 19.99m,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            EventId = 5,
                            FestivalId = 1,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 19.99m,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            EventId = 2,
                            FestivalId = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 29.99m,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            EventId = 6,
                            FestivalId = 2,
                            IsDeleted = false,
                            IsUpdated = false,
                            Price = 29.99m,
                            TicketTypeId = 2
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.TicketJPG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReservationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TicketJPG");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "eventflow_bilet_test_53538b58-f885-4f4a-b675-a4aa4063ccf3.jpg",
                            ReservationGuid = new Guid("53538b58-f885-4f4a-b675-a4aa4063ccf3")
                        },
                        new
                        {
                            Id = 2,
                            FileName = "eventflow_bilet_test_ed8b9230-223b-4609-8d13-aa6017edad09.jpg",
                            ReservationGuid = new Guid("ed8b9230-223b-4609-8d13-aa6017edad09")
                        },
                        new
                        {
                            Id = 3,
                            FileName = "eventflow_bilet_test_f9a076c4-3475-4a28-a60c-6e0e3c03731a.jpg",
                            ReservationGuid = new Guid("f9a076c4-3475-4a28-a60c-6e0e3c03731a")
                        },
                        new
                        {
                            Id = 4,
                            FileName = "eventflow_bilet_test_de1d6773-f027-4888-996a-0296e5c52708.jpg",
                            ReservationGuid = new Guid("de1d6773-f027-4888-996a-0296e5c52708")
                        },
                        new
                        {
                            Id = 5,
                            FileName = "eventflow_bilet_test_0b74ec7b-933b-4163-afa5-e0997681dccd_1.jpg",
                            ReservationGuid = new Guid("0b74ec7b-933b-4163-afa5-e0997681dccd")
                        },
                        new
                        {
                            Id = 6,
                            FileName = "eventflow_bilet_test_0b74ec7b-933b-4163-afa5-e0997681dccd_2.jpg",
                            ReservationGuid = new Guid("0b74ec7b-933b-4163-afa5-e0997681dccd")
                        },
                        new
                        {
                            Id = 7,
                            FileName = "eventflow_bilet_test_806cade1-2685-43dc-8cfc-682fc4229db6_1.jpg",
                            ReservationGuid = new Guid("806cade1-2685-43dc-8cfc-682fc4229db6")
                        },
                        new
                        {
                            Id = 8,
                            FileName = "eventflow_bilet_test_806cade1-2685-43dc-8cfc-682fc4229db6_2.jpg",
                            ReservationGuid = new Guid("806cade1-2685-43dc-8cfc-682fc4229db6")
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.TicketPDF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReservationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TicketPDF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "eventflow_bilet_test_53538b58-f885-4f4a-b675-a4aa4063ccf3.pdf",
                            ReservationGuid = new Guid("53538b58-f885-4f4a-b675-a4aa4063ccf3")
                        },
                        new
                        {
                            Id = 2,
                            FileName = "eventflow_bilet_test_ed8b9230-223b-4609-8d13-aa6017edad09.pdf",
                            ReservationGuid = new Guid("ed8b9230-223b-4609-8d13-aa6017edad09")
                        },
                        new
                        {
                            Id = 3,
                            FileName = "eventflow_bilet_test_f9a076c4-3475-4a28-a60c-6e0e3c03731a.pdf",
                            ReservationGuid = new Guid("f9a076c4-3475-4a28-a60c-6e0e3c03731a")
                        },
                        new
                        {
                            Id = 4,
                            FileName = "eventflow_bilet_test_de1d6773-f027-4888-996a-0296e5c52708.pdf",
                            ReservationGuid = new Guid("de1d6773-f027-4888-996a-0296e5c52708")
                        },
                        new
                        {
                            Id = 5,
                            FileName = "eventflow_bilet_test_0b74ec7b-933b-4163-afa5-e0997681dccd.pdf",
                            ReservationGuid = new Guid("0b74ec7b-933b-4163-afa5-e0997681dccd")
                        },
                        new
                        {
                            Id = 6,
                            FileName = "eventflow_bilet_test_806cade1-2685-43dc-8cfc-682fc4229db6.pdf",
                            ReservationGuid = new Guid("806cade1-2685-43dc-8cfc-682fc4229db6")
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoftUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TicketType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Bilet normalny"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Bilet ulgowy"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsSoftUpdated = false,
                            IsUpdated = false,
                            Name = "Bilet rodzinny"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ad9c5f4-8523-4e63-9d50-cfaba00c440f",
                            DateOfBirth = new DateTime(2000, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFecXi1D1VOHswpug2TYlgcbhbYWuOH+s7rFdYybYL5YK9ihtciZZ+fQaB1XTYwLZw==",
                            PhoneNumberConfirmed = false,
                            PhotoName = "admin.jpg",
                            Provider = "APP",
                            RegisteredDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7e036c4e-c03f-41e7-850e-5cf59696496f",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3746e705-c6a5-4c54-8829-ca678739e170",
                            DateOfBirth = new DateTime(1985, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateusz.strapczuk2@gmail.com",
                            EmailConfirmed = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Mateusz2",
                            NormalizedEmail = "MATEUSZ.STRAPCZUK2@GMAIL.COM",
                            NormalizedUserName = "MATEUSZ.STRAPCZUK2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELVomonbUJwl8iUwvC0qddhXCg6gKQGvamGlAcB+YWg6aVQpwbuXLGjmjP4BIM238g==",
                            PhoneNumberConfirmed = false,
                            PhotoName = "user2.jpg",
                            Provider = "APP",
                            RegisteredDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "b39f1ff0-e529-40d8-8be5-2404c1c29e88",
                            Surname = "Strapczuk2",
                            TwoFactorEnabled = false,
                            UserName = "mateusz.strapczuk2@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a4276e-7f1d-4b89-b544-dbcdfcd2c3c5",
                            DateOfBirth = new DateTime(1979, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateusz.strapczuk3@gmail.com",
                            EmailConfirmed = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Mateusz3",
                            NormalizedEmail = "MATEUSZ.STRAPCZUK3@GMAIL.COM",
                            NormalizedUserName = "MATEUSZ.STRAPCZUK3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsYKITke7OE9WTAFpKk7wGLg2YXETV8+jK9itv4A+USpTZl+s8zYLuf6RZza5e8ew==",
                            PhoneNumberConfirmed = false,
                            PhotoName = "user3.jpg",
                            Provider = "APP",
                            RegisteredDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "b63125a5-29a2-45c9-884d-0101147d2d3b",
                            Surname = "Strapczuk3",
                            TwoFactorEnabled = false,
                            UserName = "mateusz.strapczuk3@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fcd7965-e100-460c-a9e0-6ce89230b8ce",
                            DateOfBirth = new DateTime(1979, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateusz.strapczuk4@gmail.com",
                            EmailConfirmed = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Mateusz4",
                            NormalizedEmail = "MATEUSZ.STRAPCZUK4@GMAIL.COM",
                            NormalizedUserName = "MATEUSZ.STRAPCZUK4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbsb2XX4j4ZMkzOJNklvVAgAZXpWIUKuhbxBjRtTKc0UGNDKU/PQmi8V3QDC8mKCQ==",
                            PhoneNumberConfirmed = false,
                            PhotoName = "user4.jpg",
                            Provider = "APP",
                            RegisteredDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "8bfc9c6c-863d-4bcc-9e56-8326ebb2d2f0",
                            Surname = "Strapczuk4",
                            TwoFactorEnabled = false,
                            UserName = "mateusz.strapczuk4@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d82ef5f8-2834-4354-a487-a318bba1998a",
                            DateOfBirth = new DateTime(1979, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mateusz.strapczuk1@gmail.com",
                            EmailConfirmed = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            Name = "Mateusz",
                            NormalizedEmail = "MATEUSZ.STRAPCZUK1@GMAIL.COM",
                            NormalizedUserName = "MATEUSZ.STRAPCZUK1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBU/HBSkYT3MDWIE1WQ9RkrrWhQwCl+k8u5dEjLEN+ozXX5ZFkzyTWlx0OZYBGuSQQ==",
                            PhoneNumberConfirmed = false,
                            PhotoName = "user5.jpg",
                            Provider = "APP",
                            RegisteredDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d33e2585-3ca5-42ad-b3d8-9807b8e88a8a",
                            Surname = "Strapczuk",
                            TwoFactorEnabled = false,
                            UserName = "mateusz.strapczuk1@gmail.com"
                        });
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("FlatNumber")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<decimal?>("HouseNumber")
                        .HasColumnType("NUMERIC(3)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("UserData");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            City = "Warszawa",
                            FlatNumber = 14m,
                            HouseNumber = 12m,
                            PhoneNumber = "789456123",
                            Street = "Wesoła",
                            ZipCode = "15-264"
                        },
                        new
                        {
                            Id = "2",
                            City = "Poznań",
                            FlatNumber = 31m,
                            HouseNumber = 10m,
                            PhoneNumber = "123456789",
                            Street = "Wiejska",
                            ZipCode = "01-342"
                        },
                        new
                        {
                            Id = "3",
                            City = "Białystok",
                            FlatNumber = 21m,
                            HouseNumber = 7m,
                            PhoneNumber = "147852369",
                            Street = "Pogodna",
                            ZipCode = "14-453"
                        },
                        new
                        {
                            Id = "4",
                            City = "Warszawa",
                            FlatNumber = 42m,
                            HouseNumber = 21m,
                            PhoneNumber = "147852369",
                            Street = "Słoneczna",
                            ZipCode = "14-453"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Event", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.EventCategory", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Hall", "Hall")
                        .WithMany("Events")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.EventDetails", "Details")
                        .WithOne("Event")
                        .HasForeignKey("EventFlowAPI.DB.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Details");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventPass", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.EventPassType", "PassType")
                        .WithMany("EventPasses")
                        .HasForeignKey("PassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.PaymentType", "PaymentType")
                        .WithMany("EventPasses")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.User", "User")
                        .WithMany("EventPasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassType");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.FestivalDetails", "Details")
                        .WithOne("Festival")
                        .HasForeignKey("EventFlowAPI.DB.Entities.Festival", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Event", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Festival", null)
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_MediaPatron", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Festival", null)
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.MediaPatron", null)
                        .WithMany()
                        .HasForeignKey("MediaPatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Organizer", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Festival", null)
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Organizer", null)
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival_Sponsor", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Festival", null)
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Sponsor", null)
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Hall", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.HallType", "Type")
                        .WithMany("Halls")
                        .HasForeignKey("HallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallDetails", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Hall", "Hall")
                        .WithOne("HallDetails")
                        .HasForeignKey("EventFlowAPI.DB.Entities.HallDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallRent", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Hall", "Hall")
                        .WithMany("Rents")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.PaymentType", "PaymentType")
                        .WithMany("HallRents")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.User", "User")
                        .WithMany("HallRents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallRent_AdditionalServices", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.AdditionalServices", null)
                        .WithMany()
                        .HasForeignKey("AdditionalServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.HallRent", null)
                        .WithMany()
                        .HasForeignKey("HallRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallType_Equipment", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.HallType", null)
                        .WithMany()
                        .HasForeignKey("HallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.EventPass", "EventPass")
                        .WithMany("Reservations")
                        .HasForeignKey("EventPassId");

                    b.HasOne("EventFlowAPI.DB.Entities.PaymentType", "PaymentType")
                        .WithMany("Reservations")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Ticket", "Ticket")
                        .WithMany("Reservations")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.TicketPDF", "TicketPDF")
                        .WithMany("Reservations")
                        .HasForeignKey("TicketPDFId");

                    b.HasOne("EventFlowAPI.DB.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventPass");

                    b.Navigation("PaymentType");

                    b.Navigation("Ticket");

                    b.Navigation("TicketPDF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation_Seat", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Reservation_TicketJPG", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.TicketJPG", null)
                        .WithMany()
                        .HasForeignKey("TicketJPGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Seat", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Ticket", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.Festival", "Festival")
                        .WithMany("Tickets")
                        .HasForeignKey("FestivalId");

                    b.HasOne("EventFlowAPI.DB.Entities.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Festival");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.UserData", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("EventFlowAPI.DB.Entities.UserData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventFlowAPI.DB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventFlowAPI.DB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventDetails", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventPass", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.EventPassType", b =>
                {
                    b.Navigation("EventPasses");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Festival", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.FestivalDetails", b =>
                {
                    b.Navigation("Festival");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Hall", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("HallDetails");

                    b.Navigation("Rents");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.HallType", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.PaymentType", b =>
                {
                    b.Navigation("EventPasses");

                    b.Navigation("HallRents");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.Ticket", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.TicketPDF", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventFlowAPI.DB.Entities.User", b =>
                {
                    b.Navigation("EventPasses");

                    b.Navigation("HallRents");

                    b.Navigation("Reservations");

                    b.Navigation("UserData");
                });
#pragma warning restore 612, 618
        }
    }
}
